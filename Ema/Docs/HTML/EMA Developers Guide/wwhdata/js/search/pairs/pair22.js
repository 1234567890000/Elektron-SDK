function FileData_Pairs(x)
{
x.t("example","illustrates");
x.t("example","extracting");
x.t("method","extract");
x.t("fieldlist.getentry","fieldentry.getcode");
x.t("fieldlist.forth","const");
x.t("void","decode");
x.t("fieldlist.getinfofieldlistnum","fieldlist.forth");
x.t("fieldlistnum","fieldlist.getinfofieldlistnum");
x.t("3.3.4","example");
x.t("extracts","information");
x.t("emastring","value");
x.t("fieldentry.getcode","data");
x.t("iterating","class");
x.t("const","emastring");
x.t("const","fieldlist");
x.t("const","fieldentry");
x.t("fieldentry.getint","break");
x.t("fieldlist","fieldlist");
x.t("fieldlist","fieldlist.hasinfo");
x.t("fieldlist","class");
x.t("illustrates","fieldlist::forth");
x.t("::blankenum","continue");
x.t("continue","switch");
x.t("::asciienum","const");
x.t("datatype","::asciienum");
x.t("datatype","::intenum");
x.t("::intenum","int64");
x.t("fieldlist.hasinfo","int16");
x.t("int64","value");
x.t("switch","fieldentry.getloadtype");
x.t("code","extracts");
x.t("fieldlist::forth","method");
x.t("value","fieldentry.getint");
x.t("value","fieldentry.getascii");
x.t("int16","fieldlistnum");
x.t("int16","dictionaryid");
x.t("decode","const");
x.t("extracting","information");
x.t("fieldlist.getinfodictionaryid","int16");
x.t("information","fieldlist");
x.t("information","entries");
x.t("data","::blankenum");
x.t("fieldentry.getloadtype","case");
x.t("case","datatype");
x.t("fieldentry.getascii","break");
x.t("dictionaryid","fieldlist.getinfodictionaryid");
x.t("following","example");
x.t("following","code");
x.t("break","case");
x.t("class","3.3.4");
x.t("class","iterating");
x.t("class","following");
x.t("fieldentry","fieldlist.getentry");
x.t("fieldentry","fieldentry");
x.t("entries","void");
x.t("extract","information");
}
